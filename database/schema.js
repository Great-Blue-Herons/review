//Setup queries generated with PGadmin and edited by me.


const pool = require("./index");

pool.connect().then((client) => {
  return client
    .query(query)
    .then((res) => {
      client.release();
    })
    .catch((err) => {
      client.release();
      return err;
    });
});

var query = `
    CREATE TABLE IF NOT EXISTS public.reviews
    (
        id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 5774954 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
        product_id integer,
        rating integer,
        date bigint,
        summary character varying COLLATE pg_catalog."default",
        body character varying COLLATE pg_catalog."default",
        recommend boolean,
        reported boolean,
        reviewer_name character varying COLLATE pg_catalog."default",
        reviewer_email character varying COLLATE pg_catalog."default",
        response character varying COLLATE pg_catalog."default",
        helpfulness integer DEFAULT 0,
        CONSTRAINT reviews_pkey PRIMARY KEY (id)
    );
    ALTER TABLE IF EXISTS public.reviews
        OWNER to corynickerson;


    CREATE INDEX IF NOT EXISTS idx_reviews_product
        ON public.reviews USING btree
        (product_id ASC NULLS LAST);

        CREATE TABLE IF NOT EXISTS public.reviews_photos
        (
            id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
            review_id integer,
            url character varying COLLATE pg_catalog."default",
            CONSTRAINT reviews_photos_pkey PRIMARY KEY (id),
            CONSTRAINT fk_review_photo FOREIGN KEY (id)
                REFERENCES public.reviews (id) MATCH SIMPLE
                ON UPDATE NO ACTION
                ON DELETE NO ACTION
        );


        ALTER TABLE IF EXISTS public.reviews_photos
            OWNER to corynickerson;


        CREATE INDEX IF NOT EXISTS idx_reviews_photos
            ON public.reviews_photos USING btree
            (review_id ASC NULLS LAST);

            CREATE TABLE IF NOT EXISTS public.characteristics_reviews
(
    id integer NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    characteristics_id integer,
    review_id integer,
    value integer,
    CONSTRAINT characteristics_reviews_pkey PRIMARY KEY (id)
);


ALTER TABLE IF EXISTS public.characteristics_reviews
    OWNER to corynickerson;
-- Index: index_charid

-- DROP INDEX IF EXISTS public.index_charid;

CREATE INDEX IF NOT EXISTS index_charid
    ON public.characteristics_reviews USING btree
    (characteristics_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: index_prod_id

-- DROP INDEX IF EXISTS public.index_prod_id;

CREATE INDEX IF NOT EXISTS index_prod_id
    ON public.characteristics_reviews USING btree
    (review_id ASC NULLS LAST)
    TABLESPACE pg_default;

    CREATE TABLE IF NOT EXISTS public.characteristics
(
    id integer NOT NULL DEFAULT nextval('characteristics_id'::regclass),
    product_id integer,
    name character varying COLLATE pg_catalog."default",
    CONSTRAINT characteristics_pkey PRIMARY KEY (id)
);


ALTER TABLE IF EXISTS public.characteristics
    OWNER to corynickerson;
-- Index: idx_char_prods

-- DROP INDEX IF EXISTS public.idx_char_prods;

CREATE INDEX IF NOT EXISTS idx_char_prods
    ON public.characteristics USING btree
    (product_id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_char_reviews

-- DROP INDEX IF EXISTS public.idx_char_reviews;

CREATE INDEX IF NOT EXISTS idx_char_reviews
    ON public.characteristics USING btree
    (id ASC NULLS LAST)
    TABLESPACE pg_default;
-- Index: idx_char_reviews3

-- DROP INDEX IF EXISTS public.idx_char_reviews3;

CREATE INDEX IF NOT EXISTS idx_char_reviews3
    ON public.characteristics USING btree
    (id ASC NULLS LAST)
    TABLESPACE pg_default;`;

pool.connect().then((client) => {
  client
    .query(query)
    .then((res) => {
      client.release();
    })
    .catch((err) => {
      console.log(err);
      client.release();
    });
});
